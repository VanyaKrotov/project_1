{
  "version": 3,
  "sources": ["../src/modules/root-manager.ts", "../node_modules/nanoid/index.browser.js", "../src/shared/utils.ts", "../src/modules/observable.ts", "../src/modules/batch.ts", "../src/modules/paths-tree.ts", "../src/modules/interceptor.ts", "../src/modules/reaction.ts", "../src/components/observer.ts", "../src/modules/components/manager.ts", "../src/modules/components/constants.ts", "../src/modules/components/object-manager.ts", "../src/modules/components/value-manager.ts", "../src/modules/components/array-manager.ts", "../src/modules/make-observable.ts", "../src/modules/autorun.ts", "../src/modules/transaction.ts", "../src/dev.ts"],
  "sourcesContent": ["import {\n  ManagerInstance,\n  ReactionInstance,\n  RootManagerInstance,\n} from \"shared/types\";\n\nclass RootManager implements RootManagerInstance {\n  private readonly managers: Record<string, ManagerInstance> = {};\n  private readonly reactions: Record<string, ReactionInstance> = {};\n\n  public addReaction<T>(id: string, reaction: ReactionInstance): void {\n    this.reactions[id] = reaction;\n  }\n\n  public deleteReaction(id: string): boolean {\n    return delete this.reactions[id];\n  }\n\n  public getReaction<T>(id: string): ReactionInstance {\n    return this.reactions[id];\n  }\n\n  public addManager(manager: ManagerInstance): void {\n    this.managers[manager.name] = manager;\n  }\n\n  public getManager(id: string): ManagerInstance {\n    return this.managers[id];\n  }\n\n  private getManagerByPathRecursive(\n    root: ManagerInstance,\n    [path, ...rest]: string[]\n  ): ManagerInstance | null {\n    if (root.name === path) {\n      return root;\n    }\n\n    if (!rest.length) {\n      return root.managers[path];\n    }\n\n    return this.getManagerByPathRecursive(root.managers[path], rest);\n  }\n\n  public getManagerByPath([\n    rootPath,\n    ...restPath\n  ]: string[]): ManagerInstance<any> | null {\n    return this.getManagerByPathRecursive(this.managers[rootPath], restPath);\n  }\n}\n\nexport default new RootManager();\n", "export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n", "import { nanoid } from \"nanoid\";\n\nexport function isObject<T>(target: T) {\n  return target && typeof target === \"object\" && !Array.isArray(target);\n}\n\nexport function isPrimitive<T>(target: T) {\n  return !isObject(target) && !Array.isArray(target);\n}\n\nexport function isClass<T>(v: T) {\n  return typeof v === \"function\" && /^\\s*class\\s+/.test(v.toString());\n}\n\nexport function isFunction(functionToCheck: Function) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\"\n  );\n}\n\nexport function getProperties<T extends object>(target: T): string[] {\n  return Object.keys(target).filter((key) => !isFunction((target as any)[key]));\n}\n\nexport function createPrivateProp<T>(\n  target: T,\n  key: string | symbol,\n  value: unknown\n) {\n  Object.defineProperty(target, key, {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value,\n  });\n}\n\nexport function createEventUId(objectId: string, key: string | symbol): string {\n  return `${objectId}#${key.toString()}`;\n}\n\nexport function createUniqPath(path = \"ObservableState\"): string {\n  return `${path}$${nanoid(4)}`;\n}\n\nexport function runAfterScript(fn: VoidFunction): Promise<void> {\n  return Promise.resolve().then(fn);\n}\n\nexport function getGetters<T extends object>(\n  obj: T,\n  ignoredKeys: string[] = []\n): Record<string, PropertyDescriptor> {\n  const descriptions = Object.getOwnPropertyDescriptors(\n    Object.getPrototypeOf(obj)\n  );\n  const result: Record<string, PropertyDescriptor> = {};\n  for (const key in descriptions) {\n    const description = descriptions[key];\n    if (\n      !description.writable &&\n      description.get &&\n      !description.set &&\n      !ignoredKeys.includes(key)\n    ) {\n      result[key] = description;\n    }\n  }\n\n  return result;\n}\n\nexport function isEqualArray<T>(arr1: T[], arr2: T[]): boolean {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every((key) => arr2.indexOf(key) !== -1);\n}\n", "import { isObject } from \"shared/utils\";\nimport type { ManagerInstance, ManagerOptions } from \"shared/types\";\n\nimport { ArrayManager, ObjectManager, ValueManager } from \"./components\";\n\nexport function observable<T extends object>(\n  target: T,\n  options: ManagerOptions\n): ManagerInstance<T>;\n\nexport function observable<T>(\n  target: Array<T>,\n  options: ManagerOptions\n): ManagerInstance<T>;\n\nexport function observable<T>(\n  target: T,\n  options: ManagerOptions\n): ManagerInstance<T>;\n\nexport function observable<T>(target: T, options: ManagerOptions) {\n  if (Array.isArray(target)) {\n    return new ArrayManager(target, options);\n  }\n\n  if (isObject(target)) {\n    return new ObjectManager(target as object, options);\n  }\n\n  if (target instanceof Set) {\n    return target;\n  }\n\n  if (target instanceof Map) {\n    return target;\n  }\n\n  return new ValueManager(target, options);\n}\n", "import { BatchInstance } from \"shared/types\";\n\nclass Batch implements BatchInstance {\n  private readonly batches: Set<VoidFunction>[] = [];\n\n  public get hasBatch(): boolean {\n    return this.batches.length > 0;\n  }\n\n  public open(): void {\n    this.batches.push(new Set<VoidFunction>());\n  }\n\n  public action(handler: VoidFunction): void {\n    if (!this.hasBatch) {\n      return handler();\n    }\n\n    this.batches[this.batches.length - 1].add(handler);\n  }\n\n  public closeBatch(): void {\n    const batch = this.batches.pop();\n    if (!batch) {\n      return;\n    }\n\n    batch.forEach((handler) => handler());\n  }\n}\n\nconst batch = new Batch();\n\nexport default batch;\n", "import {\n  ListenManagersResult,\n  ManagerInstance,\n  ObserverTypes,\n  PathNodeInstance,\n  PathsTreeInstance,\n} from \"shared/types\";\nimport { isEqualArray } from \"shared/utils\";\n\nimport rootManager from \"./root-manager\";\n\nclass TreeNode implements PathNodeInstance {\n  public children: Record<string, PathNodeInstance> = {};\n  public listenTypes: ObserverTypes[] = [];\n\n  constructor(public value: string, public manager: ManagerInstance) {}\n\n  public get keys() {\n    return Object.keys(this.children);\n  }\n\n  public push([path, ...paths]: string[]): void {\n    const nextNode =\n      this.children[path] ||\n      new TreeNode(path, this.manager!.getManager(path)!);\n\n    this.children[path] = nextNode;\n\n    if (!paths.length) {\n      return;\n    }\n\n    return nextNode.push(paths);\n  }\n}\n\nclass PathTree implements PathsTreeInstance {\n  private nodes: Record<string, PathNodeInstance> = {};\n\n  constructor(paths: string[][]) {\n    for (const [path, ...restPath] of paths) {\n      this.nodes[path] =\n        this.nodes[path] || new TreeNode(path, rootManager.getManager(path));\n\n      this.nodes[path].push(restPath);\n    }\n\n    for (const key in this.nodes) {\n      this.linkingRecursive(this.nodes[key]);\n    }\n  }\n\n  private linkingRecursive(node: PathNodeInstance) {\n    const keys = Object.keys(node.children);\n    if (!keys.length) {\n      return (node.listenTypes = [\"all\"]);\n    }\n\n    node.listenTypes = isEqualArray(keys, node.manager!.keys)\n      ? [\"add\", \"change\", \"remove\"]\n      : [\"change\"];\n\n    for (const key of keys) {\n      this.linkingRecursive(node.children[key]);\n    }\n  }\n\n  private optimizedManagersRec(node: PathNodeInstance): ListenManagersResult[] {\n    let res: ListenManagersResult[] = [\n      { listenTypes: node.listenTypes, manager: node.manager! },\n    ];\n    if (!node.keys.length) {\n      return res;\n    }\n\n    for (const key in node.children) {\n      res = res.concat(this.optimizedManagersRec(node.children[key]));\n    }\n\n    return res;\n  }\n\n  public getListenManagers(): ListenManagersResult[] {\n    let result: ListenManagersResult[] = [];\n    for (const key in this.nodes) {\n      result = result.concat(this.optimizedManagersRec(this.nodes[key]));\n    }\n\n    return result;\n  }\n}\n\nexport default PathTree;\n", "import {\n  InterceptorEvent,\n  InterceptorListener,\n  InterceptorInstance,\n} from \"shared/types\";\n\nimport PathTree from \"modules/paths-tree\";\n\nclass Interceptor implements InterceptorInstance {\n  private readonly batches = new Set<InterceptorListener>();\n\n  private watch<T>(fn: () => T, listener: InterceptorListener) {\n    this.register(listener);\n\n    const result = fn();\n\n    this.unregister(listener);\n\n    return result;\n  }\n\n  public register(listener: InterceptorListener): void {\n    this.batches.add(listener);\n  }\n\n  public unregister(listener: InterceptorListener): void {\n    this.batches.delete(listener);\n  }\n\n  public emit(event: InterceptorEvent): void {\n    if (!this.batches.size) {\n      return;\n    }\n\n    Array.from(this.batches).pop()!(event);\n  }\n\n  public getCaptured<T>(fn: () => T) {\n    const paths: string[][] = [];\n\n    const result = this.watch(fn, ({ path }) => {\n      paths.push(path);\n    });\n\n    return {\n      result,\n      variables: new PathTree(paths),\n    };\n  }\n\n  public optimizePaths(paths: string[][]): PathTree {\n    return new PathTree(paths);\n  }\n}\n\nconst interceptor = new Interceptor();\n\nexport default interceptor;\n", "import { nanoid } from \"nanoid\";\n\nimport {\n  InterceptorEvent,\n  PathsTreeInstance,\n  ReactionInstance,\n  WatchCallback,\n} from \"shared/types\";\n\nimport batch from \"./batch\";\nimport interceptor from \"./interceptor\";\nimport PathTree from \"./paths-tree\";\nimport rootManager from \"./root-manager\";\n\nclass Reaction implements ReactionInstance {\n  private paths: string[][] = [];\n  private unsubscribeFns: (() => void)[] = [];\n\n  constructor(public readonly id: string = `Reaction#${nanoid(4)}`) {\n    rootManager.addReaction(id, this);\n  }\n\n  private listener = ({ path }: InterceptorEvent) => {\n    this.paths.push(path);\n  };\n\n  private unlisten = () => {\n    if (!this.unsubscribeFns.length) {\n      return;\n    }\n\n    this.unsubscribeFns.forEach((unlistener) => unlistener());\n    this.unsubscribeFns = [];\n  };\n\n  public getOptimizationTree(): PathsTreeInstance | null {\n    if (!this.paths.length) {\n      return null;\n    }\n\n    return new PathTree(this.paths);\n  }\n\n  public dispose(): void {\n    rootManager.deleteReaction(this.id);\n\n    this.paths = [];\n    this.unlisten();\n  }\n\n  public startWatch(): void {\n    this.paths = [];\n    interceptor.register(this.listener);\n  }\n\n  public endWatch(): void {\n    interceptor.unregister(this.listener);\n  }\n\n  public watch(watch: WatchCallback): VoidFunction {\n    const tree = this.getOptimizationTree();\n    if (!tree) {\n      console.warn(\n        `Instances for listen in reaction \\`${this.id}\\` not found. Reconsider the use of adverse reactions.`\n      );\n\n      return () => {};\n    }\n\n    const managers = tree.getListenManagers();\n    const handler = () => watch(this.unlisten);\n    this.unlisten();\n    this.unsubscribeFns = managers.map(({ listenTypes, manager }) =>\n      manager.listen(listenTypes, () => {\n        batch.action(handler);\n      })\n    );\n\n    return this.unlisten;\n  }\n\n  public syncCaptured<T>(fn: () => T): T {\n    this.startWatch();\n\n    const result = fn();\n\n    this.endWatch();\n\n    return result;\n  }\n}\n\nexport { Reaction };\n", "import {\n  Event,\n  Listener,\n  ObserverInstance,\n  ObserverWithTypeInstance,\n} from \"shared/types\";\n\nclass Observer<T> implements ObserverInstance<T> {\n  private listeners = new Set<Listener<T>>();\n\n  public listen(listener: Listener<T>): VoidFunction {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  public emit(event: Event<T>): void {\n    for (const listener of this.listeners) {\n      if (listener(event)) {\n        break;\n      }\n    }\n  }\n}\n\nclass ObserverWithType<T, E extends string>\n  implements ObserverWithTypeInstance<T, E>\n{\n  private readonly listenerMap = new Map<E | \"all\", ObserverInstance<T>>();\n  protected observable = true;\n\n  public listen(type: E | E[], callback: Listener<T>): VoidFunction {\n    if (!this.observable) {\n      return () => {};\n    }\n\n    if (Array.isArray(type)) {\n    }\n\n    const unlisten: Function[] = [];\n    const types = Array.isArray(type) ? type : [type];\n    for (const eachType of types) {\n      const listeners = this.listenerMap.get(eachType) || new Observer<T>();\n\n      this.listenerMap.set(eachType, listeners);\n\n      unlisten.push(listeners.listen(callback));\n    }\n\n    return () => {\n      unlisten.forEach((fn) => fn());\n    };\n  }\n\n  public emit(type: E, event: Event<T>): void {\n    if (!this.observable || event.current === event.prev) {\n      return;\n    }\n\n    const listeners = this.listenerMap.get(type);\n    const allListeners = this.listenerMap.get(\"all\");\n    if (listeners) {\n      listeners.emit(event);\n    }\n\n    if (allListeners) {\n      allListeners.emit(event);\n    }\n  }\n}\n\nexport default Observer;\nexport { ObserverWithType };\n", "import {\n  Annotation,\n  ManagerInstance,\n  ManagerOptions,\n  ObserverTypes,\n} from \"shared/types\";\n\nimport { ObserverWithType } from \"components/observer\";\n\nimport interceptor from \"modules/interceptor\";\n\nabstract class Manager<T, A extends Annotation, M>\n  extends ObserverWithType<T, ObserverTypes>\n  implements Partial<ManagerInstance<T, M>>\n{\n  protected annotation: A = {} as A;\n  public path: string[] = [];\n\n  constructor({ path, annotation }: ManagerOptions, defaultAnnotation: A) {\n    super();\n\n    this.path = path;\n    this.annotation = { ...defaultAnnotation, ...annotation };\n    this.observable = this.annotation.observable!;\n  }\n\n  public dispose(): void {\n    this.path = [];\n    this.emit(\"dispose\", { prev: this.snapshot });\n  }\n\n  protected reportUsage(): void {\n    if (!this.annotation.observable) {\n      return;\n    }\n\n    interceptor.emit({ path: this.path });\n  }\n\n  protected joinToPath(key: string | symbol): string[] {\n    return [...this.path, String(key)];\n  }\n\n  public get name(): string {\n    return this.path[this.path.length - 1];\n  }\n\n  public get snapshot(): T {\n    // @ts-ignore\n    return this.target;\n  }\n\n  public get keys(): string[] {\n    return [];\n  }\n\n  public toString(): string {\n    return String(this.snapshot);\n  }\n}\n\nexport default Manager;\n", "import {\n  ArrayAnnotation,\n  ComputedAnnotation,\n  ObserverAnnotation,\n  ValueAnnotation,\n} from \"shared/types\";\n\nexport const OBSERVER_ANNOTATION: ObserverAnnotation = {\n  observable: true,\n};\n\nexport const VALUE_ANNOTATION: ValueAnnotation = {\n  observable: true,\n};\n\nexport const COMPUTED_ANNOTATION: ComputedAnnotation = {\n  observable: true,\n  memoised: true,\n};\n\nexport const ARRAY_ANNOTATION: ArrayAnnotation = {\n  observable: true,\n};\n", "import type {\n  Annotated,\n  ComputedAnnotation,\n  ManagerInstance,\n  ManagerOptions,\n  EntryAnnotation,\n  ObserverAnnotation,\n  ReactionInstance,\n  RequiredManagerInstance,\n} from \"shared/types\";\nimport { getGetters, runAfterScript } from \"shared/utils\";\n\nimport { observable } from \"modules/observable\";\n\nimport { Reaction } from \"../reaction\";\nimport Manager from \"./manager\";\nimport { COMPUTED_ANNOTATION, OBSERVER_ANNOTATION } from \"./constants\";\n\nclass ComputedManager<T>\n  extends Manager<T, ComputedAnnotation, unknown>\n  implements RequiredManagerInstance<T>\n{\n  private reaction: ReactionInstance;\n  private savedResult?: T;\n  private isMemoized = false;\n  private isChanged = false;\n  public managers: unknown;\n\n  constructor(private readonly target: T, options: ManagerOptions) {\n    super(options, COMPUTED_ANNOTATION);\n\n    this.reaction = new Reaction(`Computed#${this.path.join(\".\")}`);\n\n    this.emit(\"define\", { current: this.snapshot });\n  }\n\n  public getManager(): ManagerInstance | null {\n    return null;\n  }\n\n  public get snapshot(): T {\n    return (this.target as Function)();\n  }\n\n  public get value(): T {\n    const { memoised } = this.annotation;\n    if (!memoised) {\n      return this.target;\n    }\n\n    return (() => {\n      this.reportUsage();\n\n      if (this.isMemoized && !this.isChanged) {\n        return this.savedResult!;\n      }\n\n      this.savedResult = this.reaction.syncCaptured(this.target as () => T);\n      this.isMemoized = true;\n      this.isChanged = false;\n\n      this.reaction.watch(() => {\n        this.isChanged = true;\n\n        runAfterScript(() => {\n          this.emit(\"change\", {\n            current: undefined as T,\n            prev: this.savedResult!,\n          });\n        });\n      });\n\n      return this.savedResult;\n    }) as T;\n  }\n\n  public setValue(): boolean {\n    return false;\n  }\n\n  public dispose(): void {\n    this.reaction.dispose();\n    super.dispose();\n  }\n}\n\nclass ObjectManager<T extends object | Annotated>\n  extends Manager<\n    T,\n    ObserverAnnotation,\n    Record<string | symbol, ManagerInstance<any>>\n  >\n  implements RequiredManagerInstance<T>\n{\n  public managers: Record<string | symbol, ManagerInstance<any>> = {};\n\n  private proxy: T;\n\n  private get annotationOptions(): EntryAnnotation {\n    const annotation = (this.target as Annotated).annotation || {};\n\n    return {\n      fields: {},\n      getters: {},\n      ...annotation,\n    };\n  }\n\n  private handlers: Required<\n    Pick<ProxyHandler<T>, \"deleteProperty\" | \"defineProperty\">\n  > = {\n    deleteProperty: (_target, key) => {\n      const manager = this.managers[key];\n      const deleteResult = delete this.managers[key];\n\n      if (deleteResult) {\n        manager.dispose();\n        this.emit(\"remove\", { prev: manager.value });\n      }\n\n      return deleteResult;\n    },\n    defineProperty: (_target, key, prop) => {\n      const result = this.defineProperty(\n        key,\n        prop,\n        this.annotationOptions.fields[String(key)]\n      );\n\n      this.emit(\"add\", {\n        current: this.value,\n      });\n\n      return result;\n    },\n  };\n\n  private defineProperty(\n    key: string | symbol,\n    { value, configurable = true, enumerable = true }: PropertyDescriptor,\n    options?: ObserverAnnotation\n  ): boolean {\n    this.managers[key] = observable(value, {\n      path: this.joinToPath(key),\n      annotation: options,\n    });\n\n    Object.defineProperty(this.target, key, {\n      configurable,\n      enumerable,\n      get: () => this.managers[key].value,\n      set: (value) => this.managers[key].setValue(value),\n    });\n\n    return true;\n  }\n\n  private defineComputed(\n    key: string,\n    { get, ...descriptions }: PropertyDescriptor,\n    options?: ComputedAnnotation\n  ): void {\n    this.managers[key] = new ComputedManager(get!.bind(this.target), {\n      path: this.joinToPath(key),\n      annotation: options,\n    });\n\n    Object.defineProperty(this.target, key, {\n      ...descriptions,\n      get: this.managers[key].value,\n    });\n  }\n\n  constructor(private target: T, options: ManagerOptions) {\n    super(options, OBSERVER_ANNOTATION);\n\n    this.proxy = this.define(target);\n  }\n\n  public get name(): string {\n    return this.path[this.path.length - 1];\n  }\n\n  public get snapshot(): T {\n    return Object.entries(this.managers).reduce(\n      (acc, [key, value]) => Object.assign(acc, { [key]: value.snapshot }),\n      {} as T\n    );\n  }\n\n  public get value(): T {\n    this.reportUsage();\n\n    return this.proxy;\n  }\n\n  public get keys() {\n    return Object.keys(this.managers);\n  }\n\n  public setValue(value: T): boolean {\n    this.target = value;\n    const prev = { ...this.target };\n\n    this.proxy = this.define(value);\n\n    this.emit(\"change\", {\n      current: value,\n      prev,\n    });\n\n    return true;\n  }\n\n  private clearManagers() {\n    for (const key in this.managers) {\n      this.managers[key].dispose();\n    }\n\n    this.managers = {};\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearManagers();\n  }\n\n  public getManager(key: string | symbol): ManagerInstance {\n    return this.managers[key];\n  }\n\n  private define(target: T): T {\n    this.clearManagers();\n\n    const proxy = new Proxy(target, this.handlers);\n    const getters = getGetters(target, [\"annotation\"]);\n\n    const annotation = this.annotationOptions;\n\n    for (const key in target) {\n      this.defineProperty(key, { value: target[key] }, annotation.fields[key]);\n    }\n\n    for (const key in getters) {\n      this.defineComputed(key, getters[key], annotation.getters[key]);\n    }\n\n    return proxy;\n  }\n}\n\nexport default ObjectManager;\n", "import {\n  ManagerInstance,\n  ManagerOptions,\n  RequiredManagerInstance,\n  ValueAnnotation,\n} from \"shared/types\";\n\nimport { VALUE_ANNOTATION } from \"./constants\";\nimport Manager from \"./manager\";\n\nclass ValueManager<T>\n  extends Manager<T, ValueAnnotation, unknown>\n  implements RequiredManagerInstance<T>\n{\n  constructor(public target: T, options: ManagerOptions) {\n    super(options, VALUE_ANNOTATION);\n\n    this.emit(\"define\", { current: target });\n  }\n\n  get value(): T {\n    this.reportUsage();\n\n    return this.target;\n  }\n\n  public setValue(value: any): boolean {\n    const prev = this.target;\n\n    this.target = value;\n\n    this.emit(\"change\", {\n      current: value,\n      prev,\n    });\n\n    return true;\n  }\n\n  public getManager(): ManagerInstance | null {\n    return null;\n  }\n}\n\nexport default ValueManager;\n", "import { observable } from \"modules/observable\";\nimport {\n  ArrayAnnotation,\n  ManagerInstance,\n  ManagerOptions,\n  RequiredManagerInstance,\n} from \"shared/types\";\nimport { isFunction } from \"shared/utils\";\n\nimport { ARRAY_ANNOTATION } from \"./constants\";\nimport Manager from \"./manager\";\n\nclass ArrayManager<T>\n  extends Manager<Array<T>, ArrayAnnotation, Array<ManagerInstance<T>>>\n  implements RequiredManagerInstance<Array<T>>\n{\n  private managers: Array<ManagerInstance> = [];\n  private proxy: Array<T>;\n\n  constructor(private target: Array<T>, options: ManagerOptions) {\n    super(options, ARRAY_ANNOTATION);\n\n    this.proxy = this.define(target);\n\n    this.emit(\"define\", { current: this.value });\n  }\n\n  private handlers: Required<\n    Pick<ProxyHandler<Array<T>>, \"deleteProperty\" | \"get\" | \"set\">\n  > = {\n    get: (_target, key) => {\n      const index = Number(key);\n      if (!Number.isNaN(index)) {\n        return this.managers[index]?.value;\n      }\n\n      const value = this.target[key as keyof Array<T>];\n      if (isFunction(value as any)) {\n        return (...args: any[]) =>\n          (value as Function).call(this.proxy, ...args);\n      }\n\n      return value;\n    },\n    set: (_target, key, value) => {\n      const index = Number(key);\n      if (!Number.isNaN(index)) {\n        if (index in this.managers) {\n          return this.managers[index].setValue(value);\n        }\n\n        try {\n          this.managers[index] = observable(value, {\n            path: this.joinToPath(key),\n          });\n          this.target[index] = value;\n\n          this.emit(\"add\", { current: this.value });\n\n          return true;\n        } catch {\n          return false;\n        }\n      }\n\n      this.target[key as keyof Array<T>] = value;\n\n      return true;\n    },\n    deleteProperty: (_target, key) => {\n      const index = Number(key);\n      if (Number.isNaN(index)) {\n        return false;\n      }\n\n      if (!(index in this.target)) {\n        return false;\n      }\n\n      const manager = this.managers[index];\n      const deleteResult = this.target.splice(index, 1).length === 1;\n      if (deleteResult) {\n        if (manager) {\n          this.managers.splice(index, 1);\n          manager.dispose();\n        }\n      }\n\n      return deleteResult;\n    },\n  };\n\n  public setValue(value: Array<T>): boolean {\n    const prev = this.value;\n\n    this.target = value;\n    this.proxy = this.define(value);\n\n    this.emit(\"change\", {\n      current: value,\n      prev,\n    });\n\n    return true;\n  }\n\n  public get snapshot(): Array<T> {\n    return [...this.target];\n  }\n\n  public get keys(): string[] {\n    const result = [];\n    for (const index in this.target) {\n      result.push(index);\n    }\n\n    return result;\n  }\n\n  public get value(): Array<T> {\n    this.reportUsage();\n\n    return this.proxy;\n  }\n\n  public getManager(key: string | symbol): ManagerInstance | null {\n    return this.managers[Number(key)];\n  }\n\n  private clearManagers() {\n    for (const manager of this.managers) {\n      manager.dispose();\n    }\n\n    this.managers = [];\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearManagers();\n  }\n\n  private define(target: Array<T>): Array<T> {\n    this.clearManagers();\n\n    for (const item of target) {\n      this.managers.push(\n        observable<T>(item, {\n          path: this.joinToPath(String(this.managers.length)),\n        })\n      );\n    }\n\n    return new Proxy(target, this.handlers);\n  }\n}\n\nexport default ArrayManager;\n", "import rootManager from \"./root-manager\";\n\nimport type { ManagerInstance, Constructable, Annotated } from \"shared/types\";\nimport { createUniqPath } from \"shared/utils\";\n\nimport { ArrayManager, ObjectManager } from \"./components\";\n\nfunction observableValue<T>(manager: ManagerInstance<T>): T {\n  rootManager.addManager(manager);\n\n  return manager.value;\n}\n\nconsole.log(rootManager);\n\nexport const observable = {\n  object: <T extends object | Annotated>(target: T) =>\n    observableValue(new ObjectManager(target, { path: [createUniqPath()] })),\n  class: <T extends object | Annotated>(Target: Constructable<T>): T =>\n    observableValue(\n      new ObjectManager(new Target(), { path: [createUniqPath(Target.name)] })\n    ),\n  array: <T>(target: Array<T>) =>\n    new ArrayManager(target, { path: [createUniqPath()] }),\n  map: <K, T>(target: Map<K, T>) => target,\n  set: <T>(target: Set<T>) => target,\n};\n", "import { WatchCallback } from \"shared/types\";\nimport { runAfterScript } from \"shared/utils\";\n\nimport { Reaction } from \"./reaction\";\n\nfunction autorun<T>(fn: () => T): VoidFunction {\n  const reaction = new Reaction();\n\n  reaction.syncCaptured(fn);\n\n  const watch: WatchCallback = () => {\n    reaction.syncCaptured(fn);\n\n    runAfterScript(() => reaction.watch(watch));\n  };\n\n  reaction.watch(watch);\n\n  return () => {\n    reaction.dispose();\n  };\n}\n\nexport { autorun };\n", "import batch from \"./batch\";\n\nfunction transaction(callback: VoidFunction): void {\n  batch.open();\n\n  callback();\n\n  batch.closeBatch();\n}\n\nexport { transaction };\n", "import { autorun, observable, transaction } from \"./index\";\n\nclass BaseState {\n  counter = 1;\n  array = [10, 23];\n\n  get mul() {\n    return this.counter * 2;\n  }\n}\n\nclass State extends BaseState {\n  increment() {\n    this.counter++;\n  }\n\n  decrement() {\n    this.counter--;\n  }\n\n  fetch() {\n    this.array[0] = this.counter + 1;\n  }\n\n  push() {\n    transaction(() => {\n      this.counter++;\n      this.array.push(this.array.length * this.counter);\n      this.counter++;\n    });\n  }\n}\n\nconst obj = {\n  counter: 1,\n  inc() {\n    this.counter++;\n  },\n  dec() {\n    this.counter--;\n  },\n};\n\nconst state = observable.class(State);\nconst stateObj = observable.object(obj);\n\nconsole.log(state);\n\nconst div = document.createElement(\"div\");\nconst div1 = document.createElement(\"div\");\nconst div2 = document.createElement(\"div\");\nconst buttonPlus = document.createElement(\"button\");\nconst buttonMinus = document.createElement(\"button\");\nconst buttonPlus2 = document.createElement(\"button\");\nconst buttonMinus2 = document.createElement(\"button\");\nconst buttonFetch = document.createElement(\"button\");\nconst buttonPush = document.createElement(\"button\");\n\nbuttonMinus.innerText = \"-\";\nbuttonPlus.innerText = \"+\";\nbuttonPlus2.innerText = \"+\";\nbuttonMinus2.innerText = \"-\";\nbuttonFetch.innerText = \"fetch\";\nbuttonPush.innerText = \"push\";\n\nautorun(() => {\n  console.log(\"trigger counter\");\n  div.innerText = `state: ${state.counter}`;\n});\n\nautorun(() => {\n  console.log(\"trigger stateObj\");\n  div1.innerText = `stateObj: ${stateObj.counter}`;\n});\n\nautorun(() => {\n  console.log(\"trigger array\");\n  div2.innerText = `arr: ${JSON.stringify(state.array)}`;\n  div.innerText = `state: ${state.counter}`;\n});\n\nbuttonPlus.addEventListener(\"click\", () => {\n  state.increment();\n});\n\nbuttonMinus.addEventListener(\"click\", () => {\n  state.decrement();\n});\n\nbuttonPlus2.addEventListener(\"click\", () => {\n  stateObj.inc();\n});\n\nbuttonMinus2.addEventListener(\"click\", () => {\n  stateObj.dec();\n});\n\nbuttonFetch.addEventListener(\"click\", () => {\n  state.fetch();\n});\n\nbuttonPush.addEventListener(\"click\", () => {\n  state.push();\n});\n\ndocument.body.appendChild(div);\ndocument.body.appendChild(div1);\ndocument.body.appendChild(div2);\ndocument.body.appendChild(buttonPlus);\ndocument.body.appendChild(buttonMinus);\ndocument.body.appendChild(buttonPlus2);\ndocument.body.appendChild(buttonMinus2);\ndocument.body.appendChild(buttonFetch);\ndocument.body.appendChild(buttonPush);\n"],
  "mappings": "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",
  "names": ["obj", "batch", "watch", "value", "observable", "watch", "observable"]
}
