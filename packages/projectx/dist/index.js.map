{
  "version": 3,
  "sources": ["../src/components/batch.ts", "../src/components/interceptor.ts", "../src/components/reaction-manager.ts", "../src/components/root-manager.ts", "../src/modules/initialize.ts", "../src/shared/uid.ts", "../src/shared/utils.ts", "../src/shared/constants.ts", "../src/modules/observable.ts", "../src/components/observer.ts", "../src/modules/components/manager.ts", "../src/modules/paths-tree.ts", "../src/modules/reaction.ts", "../src/modules/components/computed-manager.ts", "../src/modules/components/object-manager.ts", "../src/modules/components/value-manager.ts", "../src/modules/components/array-manager.ts", "../src/modules/make-observable.ts", "../src/modules/autorun.ts", "../src/modules/transaction.ts", "../src/dev.ts"],
  "sourcesContent": ["import { BatchInstance } from \"shared/types\";\r\n\r\nclass Batch implements BatchInstance {\r\n  private readonly batches: Set<VoidFunction>[] = [];\r\n\r\n  public open(): void {\r\n    this.batches.push(new Set<VoidFunction>());\r\n  }\r\n\r\n  public action(handler: VoidFunction): void {\r\n    if (!this.batches.length) {\r\n      return handler();\r\n    }\r\n\r\n    this.batches[this.batches.length - 1].add(handler);\r\n  }\r\n\r\n  public close(): void {\r\n    const batch = this.batches.pop();\r\n    if (!batch) {\r\n      return;\r\n    }\r\n\r\n    batch.forEach((handler) => handler());\r\n  }\r\n}\r\n\r\nexport default Batch;\r\n", "import {\r\n  InterceptorEvent,\r\n  InterceptorListener,\r\n  InterceptorInstance,\r\n} from \"shared/types\";\r\n\r\nclass Interceptor implements InterceptorInstance {\r\n  private readonly listeners = new Set<InterceptorListener>();\r\n\r\n  public register(listener: InterceptorListener): void {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  public unregister(listener: InterceptorListener): void {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  public emit(event: InterceptorEvent): void {\r\n    if (!this.listeners.size) {\r\n      return;\r\n    }\r\n\r\n    Array.from(this.listeners).pop()!(event);\r\n  }\r\n}\r\n\r\nexport default Interceptor;\r\n", "import { ReactionInstance, ReactionManagerInstance } from \"shared/types\";\r\n\r\nclass ReactionManager implements ReactionManagerInstance {\r\n  private readonly reactions: Record<string, ReactionInstance> = {};\r\n\r\n  public add(id: string, reaction: ReactionInstance): void {\r\n    this.reactions[id] = reaction;\r\n  }\r\n\r\n  public delete(id: string): boolean {\r\n    return delete this.reactions[id];\r\n  }\r\n\r\n  public get(id: string): ReactionInstance | null {\r\n    return this.reactions[id];\r\n  }\r\n}\r\n\r\nexport default ReactionManager;\r\n", "import { ManagerInstance, RootManagerInstance } from \"shared/types\";\r\n\r\nclass RootManager implements RootManagerInstance {\r\n  private readonly managers: Record<string, ManagerInstance> = {};\r\n\r\n  public add(manager: ManagerInstance): void {\r\n    this.managers[manager.name] = manager;\r\n  }\r\n\r\n  public get(id: string): ManagerInstance {\r\n    return this.managers[id];\r\n  }\r\n\r\n  private getByPathRec(\r\n    root: ManagerInstance,\r\n    [path, ...rest]: string[]\r\n  ): ManagerInstance | null {\r\n    if (root.name === path) {\r\n      return root;\r\n    }\r\n\r\n    if (!rest.length) {\r\n      return root.managers[path];\r\n    }\r\n\r\n    return this.getByPathRec(root.managers[path], rest);\r\n  }\r\n\r\n  public getByPath([rootPath, ...restPath]: string[]): ManagerInstance | null {\r\n    return this.getByPathRec(this.managers[rootPath], restPath);\r\n  }\r\n}\r\n\r\nexport default RootManager;\r\n", "import Batch from \"components/batch\";\r\nimport Interceptor from \"components/interceptor\";\r\nimport ReactionManager from \"components/reaction-manager\";\r\nimport RootManager from \"components/root-manager\";\r\n\r\nexport const rootManager = new RootManager();\r\n\r\nexport const interceptor = new Interceptor();\r\n\r\nexport const batch = new Batch();\r\n\r\nexport const reactionManager = new ReactionManager();\r\n", "function uidGenerator(): () => number {\r\n  let i = 0;\r\n\r\n  return (): number => i++;\r\n}\r\n\r\nconst uid = uidGenerator();\r\n\r\nexport { uidGenerator, uid };\r\n", "import { uid } from \"shared/uid\";\r\n\r\nexport function isObject<T>(target: T) {\r\n  return target && typeof target === \"object\" && !Array.isArray(target);\r\n}\r\n\r\nexport function isFunction(functionToCheck: Function) {\r\n  return (\r\n    functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\"\r\n  );\r\n}\r\n\r\nexport function createUniqPath(path = \"ObservableState\"): string {\r\n  return `${path}$${uid()}`;\r\n}\r\n\r\nexport function runAfterScript(fn: VoidFunction): Promise<void> {\r\n  return Promise.resolve().then(fn);\r\n}\r\n\r\nexport function getGetters<T extends object>(\r\n  obj: T,\r\n  ignoredKeys: string[] = []\r\n): Record<string, PropertyDescriptor> {\r\n  const descriptions = Object.getOwnPropertyDescriptors(\r\n    Object.getPrototypeOf(obj)\r\n  );\r\n  const result: Record<string, PropertyDescriptor> = {};\r\n  for (const key in descriptions) {\r\n    const description = descriptions[key];\r\n    if (\r\n      !description.writable &&\r\n      description.get &&\r\n      !description.set &&\r\n      !ignoredKeys.includes(key)\r\n    ) {\r\n      result[key] = description;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function isEqualArray<T>(arr1: T[], arr2: T[]): boolean {\r\n  if (arr1.length !== arr2.length) {\r\n    return false;\r\n  }\r\n\r\n  return arr1.every((key) => arr2.indexOf(key) !== -1);\r\n}\r\n", "import {\r\n  ArrayAnnotation,\r\n  ComputedAnnotation,\r\n  ObserverAnnotation,\r\n  ValueAnnotation,\r\n} from \"shared/types\";\r\n\r\nexport const ANNOTATIONS = {\r\n  observer: {\r\n    observable: true,\r\n  } as ObserverAnnotation,\r\n  value: {\r\n    observable: true,\r\n  } as ValueAnnotation,\r\n  computed: {\r\n    observable: true,\r\n    memoised: true,\r\n  } as ComputedAnnotation,\r\n  array: {\r\n    observable: true,\r\n  } as ArrayAnnotation,\r\n};\r\n\r\nexport const __DEV__ = process.env.NODE_ENV === \"development\";\r\n", "import { isObject } from \"shared/utils\";\r\nimport type { ManagerInstance, ManagerOptions } from \"shared/types\";\r\n\r\nimport { ArrayManager, ObjectManager, ValueManager } from \"./components\";\r\n\r\nexport function observable<T extends object>(\r\n  target: T,\r\n  options: ManagerOptions\r\n): ManagerInstance<T>;\r\n\r\nexport function observable<T>(\r\n  target: Array<T>,\r\n  options: ManagerOptions\r\n): ManagerInstance<T>;\r\n\r\nexport function observable<T>(\r\n  target: T,\r\n  options: ManagerOptions\r\n): ManagerInstance<T>;\r\n\r\nexport function observable<T>(target: T, options: ManagerOptions) {\r\n  if (Array.isArray(target)) {\r\n    return new ArrayManager(target, options);\r\n  }\r\n\r\n  if (isObject(target)) {\r\n    return new ObjectManager(target as object, options);\r\n  }\r\n\r\n  if (target instanceof Set) {\r\n    return target;\r\n  }\r\n\r\n  if (target instanceof Map) {\r\n    return target;\r\n  }\r\n\r\n  return new ValueManager(target, options);\r\n}\r\n", "import {\r\n  Event,\r\n  Listener,\r\n  ObserverInstance,\r\n  ObserverWithTypeInstance,\r\n} from \"shared/types\";\r\n\r\nclass Observer<T> implements ObserverInstance<T> {\r\n  private listeners = new Set<Listener<T>>();\r\n\r\n  public listen(listener: Listener<T>): VoidFunction {\r\n    this.listeners.add(listener);\r\n\r\n    return () => {\r\n      this.listeners.delete(listener);\r\n    };\r\n  }\r\n\r\n  public emit(event: Event<T>): void {\r\n    for (const listener of this.listeners) {\r\n      if (listener(event)) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass ObserverWithType<T, E extends string>\r\n  implements ObserverWithTypeInstance<T, E>\r\n{\r\n  private readonly listenerMap = new Map<E | \"all\", ObserverInstance<T>>();\r\n  protected observable = true;\r\n\r\n  public listen(type: E | E[], callback: Listener<T>): VoidFunction {\r\n    if (!this.observable) {\r\n      return () => {};\r\n    }\r\n\r\n    const unlisten: Function[] = [];\r\n    const types = Array.isArray(type) ? type : [type];\r\n    for (const eachType of types) {\r\n      const listeners = this.listenerMap.get(eachType) || new Observer<T>();\r\n\r\n      this.listenerMap.set(eachType, listeners);\r\n\r\n      unlisten.push(listeners.listen(callback));\r\n    }\r\n\r\n    return () => {\r\n      unlisten.forEach((fn) => fn());\r\n    };\r\n  }\r\n\r\n  public emit(type: E, event: Event<T>): void {\r\n    if (!this.observable || event.current === event.prev) {\r\n      return;\r\n    }\r\n\r\n    const listeners = this.listenerMap.get(type);\r\n    const allListeners = this.listenerMap.get(\"all\");\r\n    if (listeners) {\r\n      listeners.emit(event);\r\n    }\r\n\r\n    if (allListeners) {\r\n      allListeners.emit(event);\r\n    }\r\n  }\r\n}\r\n\r\nexport { ObserverWithType };\r\n", "import {\r\n  Annotation,\r\n  ManagerInstance,\r\n  ManagerOptions,\r\n  ObserverTypes,\r\n} from \"shared/types\";\r\n\r\nimport { ObserverWithType } from \"components/observer\";\r\n\r\nimport { interceptor } from \"modules/initialize\";\r\n\r\nabstract class Manager<T, A extends Annotation, M>\r\n  extends ObserverWithType<T, ObserverTypes>\r\n  implements Partial<ManagerInstance<T, M>>\r\n{\r\n  protected annotation: A = {} as A;\r\n  public path: string[] = [];\r\n\r\n  constructor({ path, annotation }: ManagerOptions, defaultAnnotation: A) {\r\n    super();\r\n\r\n    this.path = path;\r\n    this.annotation = { ...defaultAnnotation, ...annotation };\r\n    this.observable = this.annotation.observable!;\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.path = [];\r\n    this.disposeManagers();\r\n    this.emit(\"dispose\", { prev: this.snapshot });\r\n  }\r\n\r\n  protected reportUsage(): void {\r\n    if (!this.annotation.observable) {\r\n      return;\r\n    }\r\n\r\n    interceptor.emit({ path: this.path });\r\n  }\r\n\r\n  protected joinToPath(key: string | symbol): string[] {\r\n    return [...this.path, String(key)];\r\n  }\r\n\r\n  public get name(): string {\r\n    return this.path[this.path.length - 1];\r\n  }\r\n\r\n  public get snapshot(): T {\r\n    // @ts-ignore\r\n    return this.target;\r\n  }\r\n\r\n  public get keys(): string[] {\r\n    return [];\r\n  }\r\n\r\n  public toString(): string {\r\n    return String(this.snapshot);\r\n  }\r\n\r\n  public disposeManagers(): void {}\r\n}\r\n\r\nexport default Manager;\r\n", "import {\r\n  ListenManagersResult,\r\n  ManagerInstance,\r\n  ObserverTypes,\r\n  PathNodeInstance,\r\n  PathsTreeInstance,\r\n} from \"shared/types\";\r\nimport { isEqualArray } from \"shared/utils\";\r\n\r\nimport { rootManager } from \"modules/initialize\";\r\n\r\nclass PathNode implements PathNodeInstance {\r\n  public children: Record<string, PathNodeInstance> = {};\r\n  public listenTypes: ObserverTypes[] = [];\r\n\r\n  constructor(public value: string, public manager: ManagerInstance) {}\r\n\r\n  public get keys() {\r\n    return Object.keys(this.children);\r\n  }\r\n\r\n  public push([path, ...paths]: string[]): void {\r\n    const nextNode =\r\n      this.children[path] ||\r\n      new PathNode(path, this.manager!.manager(path)!);\r\n\r\n    this.children[path] = nextNode;\r\n\r\n    if (!paths.length) {\r\n      return;\r\n    }\r\n\r\n    return nextNode.push(paths);\r\n  }\r\n}\r\n\r\nclass PathTree implements PathsTreeInstance {\r\n  private nodes: Record<string, PathNodeInstance> = {};\r\n\r\n  constructor(paths: string[][]) {\r\n    for (const [path, ...restPath] of paths) {\r\n      this.nodes[path] =\r\n        this.nodes[path] || new PathNode(path, rootManager.get(path));\r\n\r\n      this.nodes[path].push(restPath);\r\n    }\r\n\r\n    for (const key in this.nodes) {\r\n      this.linkingRec(this.nodes[key]);\r\n    }\r\n  }\r\n\r\n  private linkingRec(node: PathNodeInstance) {\r\n    const keys = Object.keys(node.children);\r\n    if (!keys.length) {\r\n      return (node.listenTypes = [\"all\"]);\r\n    }\r\n\r\n    node.listenTypes = isEqualArray(keys, node.manager!.keys)\r\n      ? [\"add\", \"change\", \"remove\"]\r\n      : [\"change\"];\r\n\r\n    for (const key of keys) {\r\n      this.linkingRec(node.children[key]);\r\n    }\r\n  }\r\n\r\n  private optimizedRec(node: PathNodeInstance): ListenManagersResult[] {\r\n    let result: ListenManagersResult[] = [\r\n      { listenTypes: node.listenTypes, manager: node.manager! },\r\n    ];\r\n    if (!node.keys.length) {\r\n      return result;\r\n    }\r\n\r\n    for (const key in node.children) {\r\n      result = result.concat(this.optimizedRec(node.children[key]));\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public getListenManagers(): ListenManagersResult[] {\r\n    let result: ListenManagersResult[] = [];\r\n    for (const key in this.nodes) {\r\n      result = result.concat(this.optimizedRec(this.nodes[key]));\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default PathTree;\r\n", "import {\r\n  InterceptorEvent,\r\n  PathsTreeInstance,\r\n  ReactionInstance,\r\n  WatchCallback,\r\n} from \"shared/types\";\r\nimport { uid } from \"shared/uid\";\r\n\r\nimport PathTree from \"modules/paths-tree\";\r\nimport { batch, interceptor, reactionManager } from \"modules/initialize\";\r\n\r\nclass Reaction implements ReactionInstance {\r\n  private paths: string[][] = [];\r\n  private unsubscribeFns: (() => void)[] = [];\r\n\r\n  constructor(public readonly id: string = `Reaction#${uid()}`) {\r\n    reactionManager.add(id, this);\r\n  }\r\n\r\n  private listener = ({ path }: InterceptorEvent) => {\r\n    this.paths.push(path);\r\n  };\r\n\r\n  private unlisten = () => {\r\n    if (!this.unsubscribeFns.length) {\r\n      return;\r\n    }\r\n\r\n    this.unsubscribeFns.forEach((unlistener) => unlistener());\r\n    this.unsubscribeFns = [];\r\n  };\r\n\r\n  public getPathTree(): PathsTreeInstance | null {\r\n    if (!this.paths.length) {\r\n      return null;\r\n    }\r\n\r\n    return new PathTree(this.paths);\r\n  }\r\n\r\n  public dispose(): void {\r\n    reactionManager.delete(this.id);\r\n\r\n    this.paths = [];\r\n    this.unlisten();\r\n  }\r\n\r\n  public startWatch(): void {\r\n    this.paths = [];\r\n    interceptor.register(this.listener);\r\n  }\r\n\r\n  public endWatch(): void {\r\n    interceptor.unregister(this.listener);\r\n  }\r\n\r\n  public watch(watch: WatchCallback): VoidFunction {\r\n    const tree = this.getPathTree();\r\n    if (!tree) {\r\n      console.warn(\r\n        `Instances for listen in reaction \\`${this.id}\\` not found. Reconsider the use of adverse reactions.`\r\n      );\r\n\r\n      return () => {};\r\n    }\r\n\r\n    const managers = tree.getListenManagers();\r\n    const handler = () => watch(this.unlisten);\r\n    this.unlisten();\r\n    this.unsubscribeFns = managers.map(({ listenTypes, manager }) =>\r\n      manager.listen(listenTypes, () => {\r\n        batch.action(handler);\r\n      })\r\n    );\r\n\r\n    return this.unlisten;\r\n  }\r\n\r\n  public syncCaptured<T>(fn: () => T): T {\r\n    this.startWatch();\r\n\r\n    const result = fn();\r\n\r\n    this.endWatch();\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { Reaction };\r\n", "import type {\r\n  ComputedAnnotation,\r\n  ManagerInstance,\r\n  ManagerOptions,\r\n  ReactionInstance,\r\n  RequiredManagerInstance,\r\n} from \"shared/types\";\r\nimport { runAfterScript } from \"shared/utils\";\r\nimport { ANNOTATIONS } from \"shared/constants\";\r\n\r\nimport { Reaction } from \"../reaction\";\r\nimport Manager from \"./manager\";\r\n\r\nclass ComputedManager<T>\r\n  extends Manager<T, ComputedAnnotation, null>\r\n  implements RequiredManagerInstance<T>\r\n{\r\n  private reaction: ReactionInstance;\r\n  private savedResult?: T;\r\n  private isMemoized = false;\r\n  private isChanged = false;\r\n  public managers = null;\r\n\r\n  constructor(private readonly target: T, options: ManagerOptions) {\r\n    super(options, ANNOTATIONS.computed);\r\n\r\n    this.reaction = new Reaction(`Computed#${this.path.join(\".\")}`);\r\n\r\n    this.emit(\"define\", { current: this.snapshot });\r\n  }\r\n\r\n  public manager(): ManagerInstance | null {\r\n    return null;\r\n  }\r\n\r\n  public get snapshot(): T {\r\n    return (this.target as Function)();\r\n  }\r\n\r\n  public get value(): T {\r\n    const { memoised } = this.annotation;\r\n    if (!memoised) {\r\n      return this.target;\r\n    }\r\n\r\n    return (() => {\r\n      this.reportUsage();\r\n\r\n      if (this.isMemoized && !this.isChanged) {\r\n        return this.savedResult!;\r\n      }\r\n\r\n      this.savedResult = this.reaction.syncCaptured(this.target as () => T);\r\n      this.isMemoized = true;\r\n      this.isChanged = false;\r\n\r\n      this.reaction.watch(() => {\r\n        this.isChanged = true;\r\n\r\n        runAfterScript(() => {\r\n          this.emit(\"change\", {\r\n            current: undefined as T,\r\n            prev: this.savedResult!,\r\n          });\r\n        });\r\n      });\r\n\r\n      return this.savedResult;\r\n    }) as T;\r\n  }\r\n\r\n  public set(): boolean {\r\n    return false;\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.reaction.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n\r\nexport default ComputedManager;\r\n", "import type {\r\n  Annotated,\r\n  ComputedAnnotation,\r\n  ManagerInstance,\r\n  ManagerOptions,\r\n  EntryAnnotation,\r\n  ObserverAnnotation,\r\n  RequiredManagerInstance,\r\n} from \"shared/types\";\r\nimport { getGetters } from \"shared/utils\";\r\nimport { ANNOTATIONS } from \"shared/constants\";\r\n\r\nimport { observable } from \"modules/observable\";\r\n\r\nimport Manager from \"./manager\";\r\nimport ComputedManager from \"./computed-manager\";\r\n\r\nclass ObjectManager<T extends object | Annotated>\r\n  extends Manager<\r\n    T,\r\n    ObserverAnnotation,\r\n    Record<string | symbol, ManagerInstance<any>>\r\n  >\r\n  implements RequiredManagerInstance<T>\r\n{\r\n  public managers: Record<string | symbol, ManagerInstance> = {};\r\n\r\n  private proxy: T;\r\n\r\n  private get annotations(): EntryAnnotation {\r\n    const annotation = (this.target as Annotated).annotation || {};\r\n\r\n    return {\r\n      fields: {},\r\n      getters: {},\r\n      ...annotation,\r\n    };\r\n  }\r\n\r\n  private handlers: Required<\r\n    Pick<ProxyHandler<T>, \"deleteProperty\" | \"defineProperty\">\r\n  > = {\r\n    deleteProperty: (_target, key) => {\r\n      const manager = this.managers[key];\r\n      const deleteResult = delete this.managers[key];\r\n\r\n      if (deleteResult) {\r\n        manager.dispose();\r\n        this.emit(\"remove\", { prev: manager.value });\r\n      }\r\n\r\n      return deleteResult;\r\n    },\r\n    defineProperty: (_target, key, prop) => {\r\n      const result = this.defineProp(\r\n        key,\r\n        prop,\r\n        this.annotations.fields[String(key)]\r\n      );\r\n\r\n      this.emit(\"add\", {\r\n        current: this.value,\r\n      });\r\n\r\n      return result;\r\n    },\r\n  };\r\n\r\n  private defineProp(\r\n    key: string | symbol,\r\n    { value, configurable = true, enumerable = true }: PropertyDescriptor,\r\n    options?: ObserverAnnotation\r\n  ): boolean {\r\n    this.managers[key] = observable(value, {\r\n      path: this.joinToPath(key),\r\n      annotation: options,\r\n    });\r\n\r\n    Object.defineProperty(this.target, key, {\r\n      configurable,\r\n      enumerable,\r\n      get: () => this.managers[key].value,\r\n      set: (value) => this.managers[key].set(value),\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  private defineComp(\r\n    key: string,\r\n    { get, ...descriptions }: PropertyDescriptor,\r\n    options?: ComputedAnnotation\r\n  ): void {\r\n    this.managers[key] = new ComputedManager(get!.bind(this.target), {\r\n      path: this.joinToPath(key),\r\n      annotation: options,\r\n    });\r\n\r\n    Object.defineProperty(this.target, key, {\r\n      ...descriptions,\r\n      get: this.managers[key].value,\r\n    });\r\n  }\r\n\r\n  constructor(private target: T, options: ManagerOptions) {\r\n    super(options, ANNOTATIONS.observer);\r\n\r\n    this.proxy = this.define(target);\r\n  }\r\n\r\n  public get snapshot(): T {\r\n    return Object.entries(this.managers).reduce(\r\n      (acc, [key, value]) => Object.assign(acc, { [key]: value.snapshot }),\r\n      {} as T\r\n    );\r\n  }\r\n\r\n  public get value(): T {\r\n    this.reportUsage();\r\n\r\n    return this.proxy;\r\n  }\r\n\r\n  public get keys() {\r\n    return Object.keys(this.managers);\r\n  }\r\n\r\n  public set(value: T): boolean {\r\n    this.target = value;\r\n    const prev = { ...this.target };\r\n\r\n    this.proxy = this.define(value);\r\n\r\n    this.emit(\"change\", {\r\n      current: value,\r\n      prev,\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  public disposeManagers() {\r\n    for (const key in this.managers) {\r\n      this.managers[key].dispose();\r\n    }\r\n\r\n    this.managers = {};\r\n  }\r\n\r\n  public manager(key: string | symbol): ManagerInstance {\r\n    return this.managers[key];\r\n  }\r\n\r\n  private define(target: T): T {\r\n    this.disposeManagers();\r\n\r\n    const proxy = new Proxy(target, this.handlers);\r\n    const getters = getGetters(target, [\"annotation\"]);\r\n\r\n    const annotation = this.annotations;\r\n\r\n    for (const key in target) {\r\n      this.defineProp(key, { value: target[key] }, annotation.fields[key]);\r\n    }\r\n\r\n    for (const key in getters) {\r\n      this.defineComp(key, getters[key], annotation.getters[key]);\r\n    }\r\n\r\n    return proxy;\r\n  }\r\n}\r\n\r\nexport default ObjectManager;\r\n", "import {\r\n  ManagerInstance,\r\n  ManagerOptions,\r\n  RequiredManagerInstance,\r\n  ValueAnnotation,\r\n} from \"shared/types\";\r\nimport { ANNOTATIONS } from \"shared/constants\";\r\n\r\nimport Manager from \"./manager\";\r\n\r\nclass ValueManager<T>\r\n  extends Manager<T, ValueAnnotation, unknown>\r\n  implements RequiredManagerInstance<T>\r\n{\r\n  constructor(public target: T, options: ManagerOptions) {\r\n    super(options, ANNOTATIONS.value);\r\n\r\n    this.emit(\"define\", { current: target });\r\n  }\r\n\r\n  get value(): T {\r\n    this.reportUsage();\r\n\r\n    return this.target;\r\n  }\r\n\r\n  public set(value: any): boolean {\r\n    const prev = this.target;\r\n\r\n    this.target = value;\r\n\r\n    this.emit(\"change\", {\r\n      current: value,\r\n      prev,\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  public manager(): ManagerInstance | null {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default ValueManager;\r\n", "import {\r\n  ArrayAnnotation,\r\n  ManagerInstance,\r\n  ManagerOptions,\r\n  RequiredManagerInstance,\r\n} from \"shared/types\";\r\nimport { isFunction } from \"shared/utils\";\r\nimport { ANNOTATIONS } from \"shared/constants\";\r\n\r\nimport { observable } from \"modules/observable\";\r\n\r\nimport Manager from \"./manager\";\r\n\r\nclass ArrayManager<T>\r\n  extends Manager<Array<T>, ArrayAnnotation, Array<ManagerInstance<T>>>\r\n  implements RequiredManagerInstance<Array<T>>\r\n{\r\n  private managers: Array<ManagerInstance> = [];\r\n  private proxy: Array<T>;\r\n\r\n  constructor(private target: Array<T>, options: ManagerOptions) {\r\n    super(options, ANNOTATIONS.array);\r\n\r\n    this.proxy = this.define(target);\r\n\r\n    this.emit(\"define\", { current: this.value });\r\n  }\r\n\r\n  private handlers: Required<\r\n    Pick<ProxyHandler<Array<T>>, \"deleteProperty\" | \"get\" | \"set\">\r\n  > = {\r\n    get: (_target, key) => {\r\n      const index = Number(key);\r\n      if (!Number.isNaN(index)) {\r\n        return this.managers[index]?.value;\r\n      }\r\n\r\n      const value = this.target[key as keyof Array<T>];\r\n      if (isFunction(value as never)) {\r\n        return (...args: never[]) =>\r\n          (value as Function).call(this.proxy, ...args);\r\n      }\r\n\r\n      return value;\r\n    },\r\n    set: (_target, key, value) => {\r\n      const index = Number(key);\r\n      if (!Number.isNaN(index)) {\r\n        if (index in this.managers) {\r\n          return this.managers[index].set(value);\r\n        }\r\n\r\n        try {\r\n          this.managers[index] = observable(value, {\r\n            path: this.joinToPath(key),\r\n          });\r\n          this.target[index] = value;\r\n\r\n          this.emit(\"add\", { current: this.value });\r\n\r\n          return true;\r\n        } catch {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      this.target[key as keyof Array<T>] = value;\r\n\r\n      return true;\r\n    },\r\n    deleteProperty: (_target, key) => {\r\n      const index = Number(key);\r\n      if (Number.isNaN(index)) {\r\n        return false;\r\n      }\r\n\r\n      if (!(index in this.target)) {\r\n        return false;\r\n      }\r\n\r\n      const manager = this.managers[index];\r\n      const deleteResult = this.target.splice(index, 1).length === 1;\r\n      if (deleteResult) {\r\n        if (manager) {\r\n          this.managers.splice(index, 1);\r\n          manager.dispose();\r\n        }\r\n      }\r\n\r\n      return deleteResult;\r\n    },\r\n  };\r\n\r\n  public set(value: Array<T>): boolean {\r\n    const prev = this.value;\r\n\r\n    this.target = value;\r\n    this.proxy = this.define(value);\r\n\r\n    this.emit(\"change\", {\r\n      current: value,\r\n      prev,\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  public get snapshot(): Array<T> {\r\n    return [...this.target];\r\n  }\r\n\r\n  public get keys(): string[] {\r\n    const result = [];\r\n    for (const index in this.target) {\r\n      result.push(index);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public get value(): Array<T> {\r\n    this.reportUsage();\r\n\r\n    return this.proxy;\r\n  }\r\n\r\n  public manager(key: string | symbol): ManagerInstance | null {\r\n    return this.managers[Number(key)];\r\n  }\r\n\r\n  public disposeManagers() {\r\n    for (const manager of this.managers) {\r\n      manager.dispose();\r\n    }\r\n\r\n    this.managers = [];\r\n  }\r\n\r\n  private define(target: Array<T>): Array<T> {\r\n    this.disposeManagers();\r\n\r\n    for (const item of target) {\r\n      this.managers.push(\r\n        observable<T>(item, {\r\n          path: this.joinToPath(String(this.managers.length)),\r\n        })\r\n      );\r\n    }\r\n\r\n    return new Proxy(target, this.handlers);\r\n  }\r\n}\r\n\r\nexport default ArrayManager;\r\n", "import { rootManager } from \"modules/initialize\";\r\n\r\nimport type { ManagerInstance, Constructable, Annotated } from \"shared/types\";\r\nimport { createUniqPath } from \"shared/utils\";\r\n\r\nimport { ArrayManager, ObjectManager } from \"./components\";\r\n\r\nfunction register<T>(manager: ManagerInstance<T>): T {\r\n  rootManager.add(manager);\r\n\r\n  return manager.value;\r\n}\r\n\r\nexport const observable = {\r\n  object: <T extends object | Annotated>(target: T) =>\r\n    register(new ObjectManager(target, { path: [createUniqPath()] })),\r\n  class: <T extends object | Annotated>(Target: Constructable<T>): T =>\r\n    register(\r\n      new ObjectManager(new Target(), { path: [createUniqPath(Target.name)] })\r\n    ),\r\n  array: <T>(target: Array<T>) =>\r\n    new ArrayManager(target, { path: [createUniqPath()] }),\r\n  map: <K, T>(target: Map<K, T>) => target,\r\n  set: <T>(target: Set<T>) => target,\r\n};\r\n", "import { WatchCallback } from \"shared/types\";\r\nimport { runAfterScript } from \"shared/utils\";\r\n\r\nimport { Reaction } from \"./reaction\";\r\n\r\nfunction autorun<T>(fn: () => T): VoidFunction {\r\n  const reaction = new Reaction();\r\n\r\n  reaction.syncCaptured(fn);\r\n\r\n  const watch: WatchCallback = () => {\r\n    reaction.syncCaptured(fn);\r\n\r\n    runAfterScript(() => reaction.watch(watch));\r\n  };\r\n\r\n  reaction.watch(watch);\r\n\r\n  return () => {\r\n    reaction.dispose();\r\n  };\r\n}\r\n\r\nexport { autorun };\r\n", "import { batch } from \"modules/initialize\";\r\n\r\nfunction transaction(callback: VoidFunction): void {\r\n  batch.open();\r\n\r\n  callback();\r\n\r\n  batch.close();\r\n}\r\n\r\nexport { transaction };\r\n", "import { autorun, observable, transaction } from \"./index\";\r\n\r\nclass BaseState {\r\n  counter = 1;\r\n  array = [10, 23];\r\n\r\n  get mul() {\r\n    return this.counter * 2;\r\n  }\r\n}\r\n\r\nclass State extends BaseState {\r\n  increment() {\r\n    this.counter++;\r\n  }\r\n\r\n  decrement() {\r\n    this.counter--;\r\n  }\r\n\r\n  fetch() {\r\n    this.array[0] = this.counter + 1;\r\n  }\r\n\r\n  push() {\r\n    transaction(() => {\r\n      this.counter++;\r\n      this.array.push(this.array.length * this.counter);\r\n      this.counter++;\r\n    });\r\n  }\r\n}\r\n\r\nconst obj = {\r\n  counter: 1,\r\n  inc() {\r\n    this.counter++;\r\n  },\r\n  dec() {\r\n    this.counter--;\r\n  },\r\n};\r\n\r\nconst state = observable.class(State);\r\nconst stateObj = observable.object(obj);\r\n\r\nconsole.log(state);\r\n\r\nconst div = document.createElement(\"div\");\r\nconst div1 = document.createElement(\"div\");\r\nconst div2 = document.createElement(\"div\");\r\nconst buttonPlus = document.createElement(\"button\");\r\nconst buttonMinus = document.createElement(\"button\");\r\nconst buttonPlus2 = document.createElement(\"button\");\r\nconst buttonMinus2 = document.createElement(\"button\");\r\nconst buttonFetch = document.createElement(\"button\");\r\nconst buttonPush = document.createElement(\"button\");\r\n\r\nbuttonMinus.innerText = \"-\";\r\nbuttonPlus.innerText = \"+\";\r\nbuttonPlus2.innerText = \"+\";\r\nbuttonMinus2.innerText = \"-\";\r\nbuttonFetch.innerText = \"fetch\";\r\nbuttonPush.innerText = \"push\";\r\n\r\nautorun(() => {\r\n  console.log(\"trigger counter\");\r\n  div.innerText = `state: ${state.counter}`;\r\n});\r\n\r\nautorun(() => {\r\n  console.log(\"trigger stateObj\");\r\n  div1.innerText = `stateObj: ${stateObj.counter}`;\r\n});\r\n\r\nautorun(() => {\r\n  console.log(\"trigger array\");\r\n  div2.innerText = `arr: ${JSON.stringify(state.array)}`;\r\n  div.innerText = `state: ${state.counter}`;\r\n});\r\n\r\nbuttonPlus.addEventListener(\"click\", () => {\r\n  state.increment();\r\n});\r\n\r\nbuttonMinus.addEventListener(\"click\", () => {\r\n  state.decrement();\r\n});\r\n\r\nbuttonPlus2.addEventListener(\"click\", () => {\r\n  stateObj.inc();\r\n});\r\n\r\nbuttonMinus2.addEventListener(\"click\", () => {\r\n  stateObj.dec();\r\n});\r\n\r\nbuttonFetch.addEventListener(\"click\", () => {\r\n  state.fetch();\r\n});\r\n\r\nbuttonPush.addEventListener(\"click\", () => {\r\n  state.push();\r\n});\r\n\r\ndocument.body.appendChild(div);\r\ndocument.body.appendChild(div1);\r\ndocument.body.appendChild(div2);\r\ndocument.body.appendChild(buttonPlus);\r\ndocument.body.appendChild(buttonMinus);\r\ndocument.body.appendChild(buttonPlus2);\r\ndocument.body.appendChild(buttonMinus2);\r\ndocument.body.appendChild(buttonFetch);\r\ndocument.body.appendChild(buttonPush);\r\n"],
  "mappings": "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",
  "names": ["batch", "obj", "watch", "value", "observable", "watch", "observable"]
}
